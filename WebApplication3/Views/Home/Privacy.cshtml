    <h1 style="color: #333333"> Админ панель </h1>
    @using Services.SecuritySettings
    @model IEnumerable<Services.ProcessingTime.RequestTimingInfo>

<div style="display: flex; align-items: center;">
        <h1 style="margin: 0;">@ViewData["Title"]</h1>
        <span id="rebootRequiredMessage">
            Требуется перезагрузка
        </span>
</div>
<div>
    <p style="text-indent: 30px; margin-top: 5px">Данная страница предназначена для конфигурации параметров безопасности веб-приложения. В рамках предоставленного функционала администратор имеет возможность управлять включением и отключением встроенных механизмов защиты в соответствии с текущими задачами тестирования или эксплуатации.</p>
    <p style="text-indent: 30px; margin-top: 5px">Кроме того, на странице реализована возможность просмотра журнала событий, фиксирующего время обработки входящих HTTP-запросов, что позволяет проводить оценку влияния активных защитных механизмов на производительность приложения. </p>
    <p style="text-indent: 30px; margin-top: 5px;">Обращаем внимание, что применение изменений в настройках отдельных механизмов защиты требует перезапуска веб-приложения, поскольку такие изменения затрагивают элементы архитектуры, инициализируемые на этапе старта системы.</p>
</div>
    <div style="display: flex;">
        <div style="flex: 1;">
            <h1 class="display-4" style="color: #333333">Настройки механизмов безопасности</h1>


            <!---  --->
            <h3 style="color: #333333">HTML экранирование</h3>
            <button class="toggle-description btn btn-light">
                ▼
            </button>

            <div class="description-text">
                <p>
                    Экранирование HTML помогает защитить приложение от XSS-атак, <br>
                    преобразуя специальные символы в безопасные текстовые представления. <br>
                    Это предотвращает внедрение вредоносного HTML или JavaScript в страницы.<br>
                </p>
            </div>
            <div class="form-check">
                <label class="switch">
                    @if (SecurityProvider.GetRule("UseHTMLEscaping"))
                    {
                        <input id="HtmlEscapeSwitch" type="checkbox" data-api-endpoint="ChangeHtmlEscaping" checked>
                    }
                    else
                    {
                        <input id="HtmlEscapeSwitch" type="checkbox" data-api-endpoint="ChangeHtmlEscaping">
                    }
                    <span class="slider"></span>
                </label>
            </div>


            <!---  --->
            <h3 style="color: #333333">SQL экранирование</h3>
            <button class="toggle-description btn btn-light">
                ▼
            </button>

            <div class="description-text">
                <p>
                    Экранирование SQL-данных защищает от SQL-инъекций, автоматически обрабатывая пользовательский ввод<br>
                    и не позволяя ему изменять структуру SQL-запросов.<br>
                </p>
            </div>
            <div class="form-check">
                <label class="switch">
                    @if (SecurityProvider.GetRule("UseSQLEscaping"))
                    {
                        <input id="UseSqlEscaping" type="checkbox" data-api-endpoint="ChangeSqlEscaping" checked>
                    }
                    else
                    {
                        <input id="UseSqlEscaping" type="checkbox" data-api-endpoint="ChangeSqlEscaping">
                    }
                    <span class="slider"></span>
                </label>
            </div>

            <!---  --->
            <h3 style="color: #333333">Политика безопасности контента</h3>
            <button class="toggle-description btn btn-light">
                ▼
            </button>

            <div class="description-text">
                <p>
                    Политика безопасности контента это стандарт, который сообщает сайту, какие источники данных заслуживают доверия, а какие — нет. <br>
                    Для этого на страницу добавляется HTTP-заголовок Content-Security-Policy и директивы. <br>
                    Каждая директива представляет собой «белый список», в котором через пробел прописаны источники контента.<br>
                </p>
            </div>
            <div class="form-check">
                <label class="switch">
                    @if (SecurityProvider.GetRule("UseCSP"))
                    {
                        <input id="CspOptions" type="checkbox" data-api-endpoint="ChangeCspOptions" checked>
                    }
                    else
                    {
                        <input id="CspOptions" type="checkbox" data-api-endpoint="ChangeCspOptions">
                    }
                    <span class="slider"></span>
                </label>
            </div>


            <!---  --->
            <h3 style="color: #333333">X-FRAME-OPTIONS</h3>
            <button class="toggle-description btn btn-light">
                ▼
            </button>

            <div class="description-text">
                <p>
                    X-FRAME-OPTIONS предотвращает загрузку вашего сайта в iframe на другом ресурсе,<br>
                    что защищает от clickjacking-атак.<br>
                </p>
            </div>
            <div class="form-check">
                <label class="switch">
                    @if (SecurityProvider.GetRule("UseXFrameOptions"))
                    {
                        <input id="UseXFrameOptions" type="checkbox" data-api-endpoint="ChangeXFrameOptions" checked>
                    }
                    else
                    {
                        <input id="UseXFrameOptions" type="checkbox" data-api-endpoint="ChangeXFrameOptions">
                    }
                    <span class="slider"></span>
                </label>
            </div>
            
            
            <!---  --->
            <h3 style="color: #333333">Проверка заголовка Referer</h3>
            <button class="toggle-description btn btn-light">
                ▼
            </button>

            <div class="description-text">
                <p>
                    До широкого внедрения специальных CSRF-токенов, разработчики иногда полагались на проверку заголовка HTTP Referer 
                    как средство защиты от межсайтовой подделки запросов. <br> 
                    Механизм основан на том, что при обычном переходе или отправке формы браузер указывает страницу-источник запроса в заголовке Referer.<br> 
                    Если запрос на чувствительное действие (например, перевод денег) пришёл от страницы с другого домена, можно заподозрить атаку и отклонить его.
                </p>
            </div>
            <div class="form-check">
                <label class="switch">
                    @if (SecurityProvider.GetRule("RefererChecking"))
                    {
                        <input id="UseCors" type="checkbox" data-api-endpoint="ChangeRefererChecking" checked>
                    }
                    else
                    {
                        <input id="UseCors" type="checkbox" data-api-endpoint="ChangeRefererChecking">
                    }
                    <span class="slider"></span>
                </label>
            </div>
            
            
            <!---  --->
            <h3 style="color: #333333">CORS политика</h3>
            <button class="toggle-description btn btn-light">
                ▼
            </button>

            <div class="description-text">
                <p>
                    CORS (Cross-Origin Resource Sharing) управляет доступом к ресурсам с других доменов,<br>
                    ограничивая или разрешая взаимодействие между разными сайтами.<br>
                    Это важно для защиты от несанкционированных запросов.<br>
                </p>
            </div>
            <div class="form-check">
                <label class="switch">
                    @if (SecurityProvider.GetRule("UseCORS"))
                    {
                        <input id="UseCors" type="checkbox" data-api-endpoint="ChangeCorsOptions" checked>
                    }
                    else
                    {
                        <input id="UseCors" type="checkbox" data-api-endpoint="ChangeCorsOptions">
                    }
                    <span class="slider"></span>
                </label>
            </div>
            
            
            <!---  --->
            <h3 style="color: #333333">Магические кавычки</h3>
            <button class="toggle-description btn btn-light">
                ▼
            </button>

            <div class="description-text">
                <p>
                    CORS (Cross-Origin Resource Sharing) управляет доступом к ресурсам с других доменов,<br>
                    ограничивая или разрешая взаимодействие между разными сайтами.<br>
                    Это важно для защиты от несанкционированных запросов.<br>
                </p>
            </div>
            <div class="form-check">
                <label class="switch">
                    @if (SecurityProvider.GetRule("MagicQuotes"))
                    {
                        <input id="UseCors" type="checkbox" data-api-endpoint="ChangeMagicQuotesOptions" checked>
                    }
                    else
                    {
                        <input id="UseCors" type="checkbox" data-api-endpoint="ChangeMagicQuotesOptions">
                    }
                    <span class="slider"></span>
                </label>
            </div>
        </div>
        
        <div style="flex: 1; margin-left: 20px;">
            <h2 style="color: #333333">Скорость обработки запросов</h2>

            <table class="table-custom">
                <thead>
                <tr>
                    <th>Путь</th>
                    <th>Длительность (мс)</th>
                    <th>Время запроса (UTC)</th>
                </tr>
                </thead>
                <tbody>
                @foreach (var timing in Model)
                {
                    <tr>
                        <td>@timing.Path</td>
                        <td>@timing.DurationMilliseconds</td>
                        <td>@timing.Timestamp.ToString("yyyy-MM-dd HH:mm:ss")</td>
                    </tr>
                }
                </tbody>
            </table>
        </div>
    </div>
    
    <script src="~/js/site.js" asp-append-version="true"></script>