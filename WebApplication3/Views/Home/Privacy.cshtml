    @{
    ViewData["Title"] = "Админ панель";
}
@using Services.SecuritySettings

<div style="display: flex; align-items: center;">
        <h1 style="margin: 0;">@ViewData["Title"]</h1>
        <span id="rebootRequiredMessage">
            Требуется перезагрузка
        </span>
</div>
<div>
    <p style="text-indent: 30px; margin-top: 5px">Данная страница предназначена для конфигурации параметров безопасности веб-приложения. В рамках предоставленного функционала администратор имеет возможность управлять включением и отключением встроенных механизмов защиты в соответствии с текущими задачами тестирования или эксплуатации.</p>
    <p style="text-indent: 30px; margin-top: 5px">Кроме того, на странице реализована возможность просмотра журнала событий, фиксирующего время обработки входящих HTTP-запросов, что позволяет проводить оценку влияния активных защитных механизмов на производительность приложения. </p>
    <p style="text-indent: 30px; margin-top: 5px;">Обращаем внимание, что применение изменений в настройках отдельных механизмов защиты требует перезапуска веб-приложения, поскольку такие изменения затрагивают элементы архитектуры, инициализируемые на этапе старта системы.</p>
</div>
  <style type="text/css">
    .switch {
        position: relative;
        display: inline-block;
        width: 60px;
        height: 34px;
    }

    .switch input {
        opacity: 0;
        width: 0;
        height: 0;
    }


    .slider {
        position: absolute;
        cursor: pointer;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        border-radius: 34px;
        background-color: #ccc;
        -webkit-transition: .4s;
        transition: .4s;
    }

    .slider:before {
        position: absolute;
        border-radius: 50%;
        content: "";
        height: 26px;
        width: 26px;
        left: 4px;
        bottom: 4px;
        background-color: white;
        -webkit-transition: .4s;
        transition: .4s;
    }

    input:checked + .slider {
        background-color: #2196F3;
    }

    input:focus + .slider {
        box-shadow: 0 0 1px #2196F3;
    }

    input:checked + .slider:before {
        -webkit-transform: translateX(26px);
        -ms-transform: translateX(26px);
        transform: translateX(26px);
    }
    #rebootRequiredMessage {
        display: none;
        margin-left: 25px;
        margin-top: 10px;
        padding: 10px 10px;
        border-radius: 20px;
        background-color: #E60000;
        color: white;
        font-size: large;
        font-weight: bold;
    }

    .toggle-description {
        background: none;
        border: none;
        outline: none;
        cursor: pointer;
        font-size: 18px;
        line-height: 1;
        padding: 0;
        user-select: none;
        margin-bottom: 10px;
    }

    .toggle-description:focus,
    .toggle-description:active {
        outline: none;
        box-shadow: none;
    }

    .description-text {
        color: #b0b7c6;
        max-height: 0;
        overflow: hidden;
        opacity: 0;
        transition: max-height 0.5s ease, opacity 0.5s ease;
    }

    .description-text.show {
        max-height: 200px;
        opacity: 1;
    }
    
 </style>

<h1 class="display-4">Настройки механизмов безопасности</h1>

<h3>HTML экранирование</h3>
<button class="toggle-description btn btn-light">
    ▼
</button>

<div class="description-text">
    <p>
        Экранирование HTML помогает защитить приложение от XSS-атак, <br>
        преобразуя специальные символы в безопасные текстовые представления. <br>
        Это предотвращает внедрение вредоносного HTML или JavaScript в страницы.<br>
    </p>
</div>
<div class="form-check">
    <label class="switch">
        @if (SecurityProvider.GetRule("UseHtmlEscaping"))
        {
            <input id="HtmlEscapeSwitch" type="checkbox" data-api-endpoint="ChangeHtmlEscaping" checked>
        }
        else
        {
            <input id="HtmlEscapeSwitch" type="checkbox" data-api-endpoint="ChangeHtmlEscaping">
        }
        <span class="slider"></span>
    </label>
</div>

<h3>SQL экранирование</h3>
<button class="toggle-description btn btn-light">
    ▼
</button>

<div class="description-text">
    <p>
        Экранирование SQL-данных защищает от SQL-инъекций, автоматически обрабатывая пользовательский ввод<br>
        и не позволяя ему изменять структуру SQL-запросов.<br>
    </p>
</div>
<div class="form-check">
    <label class="switch">
        @if (SecurityProvider.GetRule("UseSQLEscaping"))
        {
            <input id="UseSqlEscaping" type="checkbox" data-api-endpoint="ChangeSqlEscaping" checked>
        }
        else
        {
            <input id="UseSqlEscaping" type="checkbox" data-api-endpoint="ChangeSqlEscaping">
        }
        <span class="slider"></span>
    </label>
</div>

<h3>Валидация данных на стороне сервера</h3>
<button class="toggle-description btn btn-light">
    ▼
</button>

<div class="description-text">
    <p>
        Валидация проверяет данные перед их обработкой на сервере, даже если они уже были проверены в браузере.<br>
        Это предотвращает отправку некорректной или вредоносной информации.<br>
    </p>
</div>
<div class="form-check">
    <label class="switch">
        <!-- Место под input при необходимости -->
    </label>
</div>

<h3>X-FRAME-OPTIONS</h3>
<button class="toggle-description btn btn-light">
    ▼
</button>

<div class="description-text">
    <p>
        X-FRAME-OPTIONS предотвращает загрузку вашего сайта в iframe на другом ресурсе,<br>
        что защищает от clickjacking-атак.<br>
    </p>
</div>
<div class="form-check">
    <label class="switch">
        @if (SecurityProvider.GetRule("UseXFrameOptions"))
        {
            <input id="UseXFrameOptions" type="checkbox" data-api-endpoint="ChangeXFrameOptions" checked>
        }
        else
        {
            <input id="UseXFrameOptions" type="checkbox" data-api-endpoint="ChangeXFrameOptions">
        }
        <span class="slider"></span>
    </label>
</div>

<h3>CORS политика</h3>
<button class="toggle-description btn btn-light">
    ▼
</button>

<div class="description-text">
    <p>
        CORS (Cross-Origin Resource Sharing) управляет доступом к ресурсам с других доменов,<br>
        ограничивая или разрешая взаимодействие между разными сайтами.<br>
        Это важно для защиты от несанкционированных запросов.<br>
    </p>
</div>
<div class="form-check">
    <label class="switch">
        @if (SecurityProvider.GetRule("UseCORS"))
        {
            <input id="UseCors" type="checkbox" data-api-endpoint="ChangeCorsOptions" checked>
        }
        else
        {
            <input id="UseCors" type="checkbox" data-api-endpoint="ChangeCorsOptions">
        }
        <span class="slider"></span>
    </label>
</div>



<script>
    document.querySelectorAll('input[type="checkbox"][data-api-endpoint]').forEach(function (checkbox) {
        checkbox.addEventListener('change', function () {
            const url = `/api/admin/${this.getAttribute('data-api-endpoint')}`;
            const data = JSON.stringify({ checked: this.checked });

            const xhr = new XMLHttpRequest();
            xhr.open('POST', url, true);
            xhr.setRequestHeader('Content-Type', 'application/json');

            xhr.onreadystatechange = function () {
                if (xhr.readyState === 4) {
                    if (xhr.status === 200) {
                        console.log(`Настройка "${checkbox.id}" успешно отправлена:`, xhr.responseText);

                        if (checkbox.id === "UseCors") {
                            const notice = document.getElementById("rebootRequiredMessage");
                            notice.style.display = 'inline-block';
                        }

                    } else {
                        console.error(`Ошибка при отправке настройки "${checkbox.id}":`, xhr.status, xhr.statusText);
                    }
                }
            };

            xhr.send(data);
        });
    });
</script>

<script>
    document.querySelectorAll('.toggle-description').forEach(function(button) {
        button.addEventListener('click', function () {
            const description = this.nextElementSibling;
            description.classList.toggle('show');

            this.textContent = description.classList.contains('show') ? "▲" : "▼";
        });
    });
</script>